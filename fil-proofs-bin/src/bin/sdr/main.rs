use std::path::PathBuf;

use anyhow::Result;
use filecoin_proofs::{
    get_base_tree_leafs, get_base_tree_size, DefaultBinaryTree, DefaultPieceHasher,
};
use log::{debug, trace};
use merkletree::store::StoreConfig;
use storage_proofs_core::{
    api_version::ApiVersion, cache_key::CacheKey, drgraph::BASE_DEGREE, proof::ProofScheme,
    util::default_rows_to_discard,
};
use storage_proofs_porep::stacked::{
    LayerChallenges, SetupParams, StackedDrg, BINARY_ARITY, EXP_DEGREE,
};

// TODO vmx 2023-03-21: This should be a parameter.
const POREP_ID: [u8; 32] = [20; 32];

// TODO vmx 2023-03-21: This should be a parameter.
// will be generated by generate_replica_id()
const REPLICA_ID: [u8; 32] = [0; 32];

// TODO vmx 2023-03-21: This should be a parameter.
const SECTOR_SIZE: u64 = 2 * 1024;

// TODO vmx 2023-03-21: This should be a parameter.
const NUM_LAYERS: usize = 4;

// TODO vmx 2023-03-21: This should be a parameter.
// The directory where layers are stored.
const OUTPUT_DIR: &str = "/tmp/filbin";

type DefaultStackedDrg<'a> = StackedDrg::<'a, DefaultBinaryTree, DefaultPieceHasher>;

fn main() -> Result<()> {
    fil_logger::maybe_init();

    let base_tree_size = get_base_tree_size::<DefaultBinaryTree>(SECTOR_SIZE.into())?;
    let base_tree_leafs = get_base_tree_leafs::<DefaultBinaryTree>(base_tree_size)?;
    trace!(
        "seal phase 1: sector_size {}, base tree size {}, base tree leafs {}",
        SECTOR_SIZE,
        base_tree_size,
        base_tree_leafs,
    );

    let config = StoreConfig::new(
        PathBuf::from(OUTPUT_DIR),
        CacheKey::CommDTree.to_string(),
        default_rows_to_discard(base_tree_leafs, BINARY_ARITY),
    );

    let setup_params = SetupParams {
        nodes: base_tree_leafs,
        degree: BASE_DEGREE,
        expansion_degree: EXP_DEGREE,
        porep_id: POREP_ID,
        // For SDR the number of challenges doesn't matter, hence we can set it to 0.
        layer_challenges: LayerChallenges::new(NUM_LAYERS, 0),
        api_version: ApiVersion::V1_2_0,
    };

    let public_params = DefaultStackedDrg::setup(&setup_params)?;

    let (labels, _) = DefaultStackedDrg::replicate_phase1(
        &public_params,
        &REPLICA_ID.into(),
        config.clone(),
    )?;

    debug!("vmx: labels: {:?}", labels);

    Ok(())
}
